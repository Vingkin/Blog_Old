(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{449:function(e,t,s){"use strict";s.r(t);var a=s(2),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"什么是mvc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是mvc"}},[e._v("#")]),e._v(" 什么是MVC")]),e._v(" "),s("p",[e._v("MVC是一种设计模式，在这种模式下软件被分为三层，及"),s("strong",[e._v("Model（模型）、View（视图）、Controller（控制器）")]),e._v("。Model代表的是数据，View代表的是用户界面，Controller代表的是数据的处理逻辑，它是Model和View这两层的桥梁。将软件分层的好处是，可以将对象之间的耦合度降低，便于代码的维护。")]),e._v(" "),s("h2",{attrs:{id:"dao层是做什么的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao层是做什么的"}},[e._v("#")]),e._v(" DAO层是做什么的")]),e._v(" "),s("p",[e._v("DAO层是Data Access Object的缩写，即数据访问对象，在项目中它通常作为独立的一层，专门用于访问数据库。")]),e._v(" "),s("h2",{attrs:{id:"介绍一下spring-mvc的执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下spring-mvc的执行流程"}},[e._v("#")]),e._v(" 介绍一下Spring MVC的执行流程")]),e._v(" "),s("ol",[s("li",[e._v("整个过程开始于客户端发出一个HTTP请求，Web应用服务器接受到这个请求。如果匹配"),s("code",[e._v("DispatcherServlet")]),e._v("的请求路径，则Web容器将该请求转交给"),s("code",[e._v("DispatcherServlet")]),e._v("处理。")]),e._v(" "),s("li",[s("code",[e._v("DispatcherServlet")]),e._v("接收到这个请求后，将根据请求的信息（包括URL、HTTP方法、请求报文头、请求参数、Cookie等）及"),s("code",[e._v("HandlerMapping")]),e._v("的配置找到处理请求的处理器（"),s("code",[e._v("Handler")]),e._v("）。可将"),s("code",[e._v("HandlerMapping")]),e._v("看作路由控制器，将"),s("code",[e._v("Handler")]),e._v("看作目标主机。")]),e._v(" "),s("li",[e._v("当"),s("code",[e._v("DispatcherServlet")]),e._v("根据"),s("code",[e._v("HandlerMapping")]),e._v("得到对应请求的"),s("code",[e._v("Handler")]),e._v("后，通过"),s("code",[e._v("HandlerAdapter")]),e._v("对"),s("code",[e._v("Handler")]),e._v("进行封装，再以统一的适配器接口调用"),s("code",[e._v("Handler")]),e._v("。"),s("code",[e._v("HandlerAdapter")]),e._v("是Spring MVC框架的接口，顾名思义，"),s("code",[e._v("HandlerAdapter")]),e._v("是一个适配器，它用统一的接口对各种Handler方法进行调用。")]),e._v(" "),s("li",[e._v("处理器完成业务逻辑的处理后，将返回一个"),s("code",[e._v("ModelAndView")]),e._v("给"),s("code",[e._v("DispatcherServlet")]),e._v("，"),s("code",[e._v("ModelAndView")]),e._v("包含了视图逻辑名和模型数据信息。")]),e._v(" "),s("li",[s("code",[e._v("ModelAndView")]),e._v("中包含的是“逻辑视图名”而非真正的视图对象，"),s("code",[e._v("DispatcherServlet")]),e._v("借由"),s("code",[e._v("ViewResolver")]),e._v("完成逻辑视图名到真实视图对象的解析工作。")]),e._v(" "),s("li",[e._v("当得到真实的视图对象View后，"),s("code",[e._v("DispatcherServlet")]),e._v("就用这个View对象对"),s("code",[e._v("ModelAndView")]),e._v("中的模型数据进行视图渲染。")]),e._v(" "),s("li",[e._v("最终客户端得到的响应消息可能是有一个普通的HTML页面，也可能是一个XML或JSON串，甚至是一张图片或一个PDF文档等不同的媒体形式。")])]),e._v(" "),s("p",[s("strong",[e._v("简略版本：")])]),e._v(" "),s("ol",[s("li",[e._v("用户发送请求至前端控制器"),s("code",[e._v("DispatcherServlet")])]),e._v(" "),s("li",[s("code",[e._v("DispatcherServlet")]),e._v("收到请求调用"),s("code",[e._v("HandllerMapping")]),e._v("处理器映射器")]),e._v(" "),s("li",[e._v("处理器映射器找到具体的处理器（"),s("code",[e._v("Handler")]),e._v("）（可以根据xml配置，注解进行查找），生成处理器对象以及处理器拦截器（如果有拦截器则生成）一并返回给"),s("code",[e._v("DispatcherServlet")])]),e._v(" "),s("li",[s("code",[e._v("DispatcherServlet")]),e._v("调用"),s("code",[e._v("HandlerAdapter")]),e._v("处理器适配器")]),e._v(" "),s("li",[s("code",[e._v("HandlerAdapter")]),e._v("经过适配调用具体的处理器（"),s("code",[e._v("Controller")]),e._v("，也叫后端控制器）")]),e._v(" "),s("li",[s("code",[e._v("Controller")]),e._v("执行完成后返回"),s("code",[e._v("ModelAndView")])]),e._v(" "),s("li",[s("code",[e._v("HandlerAdapter")]),e._v("将"),s("code",[e._v("Controller")]),e._v("执行结果"),s("code",[e._v("ModelAndView")]),e._v("返回给"),s("code",[e._v("DispatcherServlet")])]),e._v(" "),s("li",[s("code",[e._v("DispatcherServlet")]),e._v("将"),s("code",[e._v("ModelAndView")]),e._v("传给"),s("code",[e._v("ViewReslover")]),e._v("视图解析器")]),e._v(" "),s("li",[s("code",[e._v("ViewReslover")]),e._v("解析后返回具体"),s("code",[e._v("View")])]),e._v(" "),s("li",[s("code",[e._v("DispatcherServlet")]),e._v("根据"),s("code",[e._v("View")]),e._v("进行渲染视图。（最终客户端得到的响应消息可能是有一个普通的HTML页面，也可能是一个XML或JSON串，甚至是一张图片或一个PDF文档等不同的媒体形式。）")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/interview/SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png",alt:""}})]),e._v(" "),s("h2",{attrs:{id:"说一说你知道的spring-mvc注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一说你知道的spring-mvc注解"}},[e._v("#")]),e._v(" 说一说你知道的Spring MVC注解")]),e._v(" "),s("p",[s("strong",[e._v("@RequestMapping")])]),e._v(" "),s("p",[e._v("该注解的作用就是用来处理请求地址映射的，也就是说将其中的处理器方法映射到url路径上")]),e._v(" "),s("p",[e._v("属性：")]),e._v(" "),s("ul",[s("li",[e._v("mothod：请求类型，比如get和post")]),e._v(" "),s("li",[e._v("value：请求地址")])]),e._v(" "),s("p",[s("strong",[e._v("@RequestParam")])]),e._v(" "),s("p",[e._v("是将请求参数绑定到控制器的方法参数上，是Spring MVC中的接收普通参数的注解")]),e._v(" "),s("p",[s("strong",[e._v("@RequestBody")])]),e._v(" "),s("p",[e._v("用于读取Request请求的body部分，并且"),s("code",[e._v("Content-Type")]),e._v("为"),s("code",[e._v("application/json")]),e._v("格式的数据，接收到数据之后会自动将数据绑定到Java对象上去。系统会使用"),s("code",[e._v("HttpMessageConverter")]),e._v("或者自定义的"),s("code",[e._v("HttpMessageConverter")]),e._v("将请求的body中的json字符串转换成java对象。")]),e._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@PostMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/sign-up"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ResponseEntity")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("signUp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@RequestBody")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("UserRegisterRequest")]),e._v(" userRegisterRequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    testService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("save")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("userRegisterRequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ResponseEntity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ok")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("userRegisterRequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[e._v("@PathVariable")])]),e._v(" "),s("p",[e._v("该注解适用于绑定url中的占位符。是Spring MVC支持rest风格的一个重要标志。")]),e._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@GetMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/klasses/{klassId}/teachers"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Teacher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("getKlassRelatedTeachers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n         "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@PathVariable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"klassId"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Long")]),e._v(" klassId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n         "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@RequestParam")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"type"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" required "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" type "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h2",{attrs:{id:"介绍一下sprig-mvc的拦截器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下sprig-mvc的拦截器"}},[e._v("#")]),e._v(" 介绍一下Sprig MVC的拦截器")]),e._v(" "),s("blockquote",[s("p",[e._v("可以拓展一下SSO单点登录来讲项目")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://ken.io/note/session-principle-skill",target:"_blank",rel:"noopener noreferrer"}},[e._v("Session的工作原理和使用经验 - Ken的杂谈"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://javaguide.cn/system-design/security/sso-intro.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSO 单点登录 | JavaGuide"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6975413007715139621",target:"_blank",rel:"noopener noreferrer"}},[e._v("SpringBoot实现登录拦截器（实战版） - 掘金 (juejin.cn)"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("拦截器会对处理器进行拦截，这样通过拦截器就可以增强处理器的功能。Spring MVC中，所有的拦截器都需要实现HandlerInterceptor接口，该接口中包含如下三个方法："),s("code",[e._v("preHandle()")]),e._v(","),s("code",[e._v("postHandle()")]),e._v(","),s("code",[e._v("afterCompletion()")]),e._v("。")]),e._v(" "),s("p",[e._v("这些方法的执行流程如下图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/interview/31C010B3F63CB1CC1ADC5481E9E77BDB.png",alt:""}})]),e._v(" "),s("p",[e._v("通过上图可以看出，Spring MVC拦截器的执行流程如下：")]),e._v(" "),s("ul",[s("li",[e._v("执行"),s("code",[e._v("preHandle")]),e._v("方法，它会返回一个布尔值。如果为false，则结束所有流程，如果为true，则执行下一步。")]),e._v(" "),s("li",[e._v("执行处理器逻辑，它包含控制器的功能")]),e._v(" "),s("li",[e._v("执行"),s("code",[e._v("postHandler")]),e._v("方法")]),e._v(" "),s("li",[e._v("执行视图解析和视图渲染")]),e._v(" "),s("li",[e._v("执行"),s("code",[e._v("afterCompletion")]),e._v("方法")])]),e._v(" "),s("p",[e._v("Spring MVC拦截器的开发步骤如下：")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("开发拦截器")]),e._v("：实现"),s("code",[e._v("HandlerInterceptor")]),e._v("接口，从三个方法中选择合适的方法，实现拦截时需要执行的具体业务逻辑，一般使用"),s("code",[e._v("preHandle")]),e._v("方法。")]),e._v(" "),s("li",[s("strong",[e._v("注册拦截器")]),e._v("：定义配置类，并让它实现"),s("code",[e._v("WebMvcConfigurer")]),e._v("接口，在接口的"),s("code",[e._v("addInterceptors")]),e._v("方法中，注册拦截器，并定义该拦截器匹配那些请求路径。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);